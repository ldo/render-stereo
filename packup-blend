#!/usr/bin/python3
#+
# This script packs up a specified .blend file, along with its
# external dependencies, into any of various archive formats,
# for convenient transfer to another location. Invoke it as
# follows:
#
#     packup-blend [options...] blendfile archivefile
#
# where blendfile is the name of the .blend file to pack up,
# archivefile is the name of the archive file to create. The
# filename extension of the archivefile indicates the archive
# format to create: this can be .zip, .tar, or the various
# common compressed versions of the latter.
#
# The one valid option is
#     --verbose
#         display various progress messages
#
# External commands needed:
#     ext-files (part of the same render-useful package that includes packup-blend);
#     tar and/or zip.
#
# Copyright 2017 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import os
import subprocess
import json
import getopt

#+
# Useful stuff
#-

def expand_path(path, parent_dir) :
    # normalizes path to be a full pathname, relative to parent_dir.
    if path.startswith("//") :
        # Blender convention for path relative to .blend file
        path = os.path.join(parent_dir, path[2:])
    elif not path.startswith("/") :
        # not expecting a path relative to anything else!
        path = None
    #end if
    return \
        path
#end expand_path

#+
# Archive types
#-

archivers = \
    { # for constructing archive-creation commands
        "tar" :
            {
                "cmd" : ("tar", "--create"),
                "cmd_suffix" : ("--file",),
                "subtype_opts" :
                    lambda subtype : {"gzip" : ("--gzip",), "bzip2" : ("--bzip2",)}[subtype],
                "verbose" : ("--verbose",),
            },
        "zip" :
            {
                "cmd" : ("zip",),
                "verbose" : ("--verbose",),
            },
    }

file_exts = \
    { # choose appropriate archiver depending on output filename extension
        ".tar" : {"type" : "tar"},
        ".tar.gz" : {"type" : "tar", "subtype" : "gzip"},
        ".tar.bz2" : {"type" : "tar", "subtype" : "bzip2"},
        ".tgz" : {"type" : "tar", "subtype" : "gzip"},
        ".tbz2" : {"type" : "tar", "subtype" : "bzip2"},
        ".zip" : {"type" : "zip"},
    }

#+
# Mainline
#-

verbose = False
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "v",
    ["verbose"]
  )
for keyword, value in opts :
    if keyword == "-v" or keyword == "--verbose" :
        verbose = True
    #end if
#end for
if len(args) != 2 :
    raise getopt.GetoptError("need exactly 2 args: the input .blend file and output archive file name")
#end if
blendfile, archivefile = args
if not blendfile.endswith(".blend") :
    raise getopt.GetoptError("doesn’t end with .blend: %s" % repr(blendfile))
#end if
if not os.path.isfile(blendfile) :
    raise getopt.GetoptError("cannot find %s" % repr(blendfile))
#end if
nr_dots = 0
max_dots = max((len(k.split(".")) - 1) for k in file_exts)
dotpos = len(archivefile)
while True :
    if nr_dots == max_dots :
        raise getopt.GetoptError("unrecognized extension: %s" % repr(archivefile))
        break
    #end if
    nr_dots += 1
    dotpos2 = archivefile[:dotpos].rfind(".")
    if dotpos2 >= 0 :
        dotpos = dotpos2
    else :
        dotpos = dotpos2
    #end if
    if dotpos < 0 and nr_dots == 1 :
        raise getopt.GetoptError("doesn’t have an extension: %s" % repr(archivefile))
    #end if
    if dotpos >= 0 :
        file_ext = archivefile[dotpos:]
        if file_ext in file_exts :
            break
    #end if
#end while

cmd = "ext-files"
try_parent_dir = False
while True :
    try :
        deps = subprocess.check_output \
          (
            args = (cmd, "--full", blendfile),
            universal_newlines = True,
          )
        break
    except FileNotFoundError :
        if try_parent_dir :
            raise
        #end if
    #end try
    cmd = os.path.join(os.path.split(sys.argv[0])[0], cmd)
    try_parent_dir = True
#end while
deps = json.loads(deps)
deps = set(i["filepath"] for i in sum((v for v in deps.values()), []))
  # set instead of list/tuple to remove any duplicates

blendfilepath = os.path.abspath(blendfile)
archivefilepath = os.path.abspath(archivefile)
parent_dir = os.path.split(blendfilepath)[0]
choose = file_exts[file_ext]
archiver = archivers[choose["type"]]

args = list(archiver["cmd"])
if verbose :
    args.extend(list(archiver["verbose"]))
#end if
if "subtype" in choose :
    args.extend(list(archiver["subtype_opts"](choose["subtype"])))
#end if
if "cmd_suffix" in archiver :
    args.extend(list(archiver["cmd_suffix"]))
#end if
args.append(archivefilepath)
args.append(os.path.split(blendfilepath)[1])
  # .blend file is always at root of unpacked directory tree
for item in sorted(deps) : # might as well include dependencies in consistent order
    if item.startswith("//") :
        args.append(item[2:])
          # keep relative paths relative in archive
    else :
        pass # ignore absolute paths and paths with no leading “/”
    #end if
#end for

subprocess.check_call \
  (
    args = args,
    cwd = parent_dir, # for correct interpretation of relative paths
  )
