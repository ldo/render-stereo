#!/bin/bash
#+
# This script displays information about a specified .blend file,
# namely the scenes, render settings and cameras. Invoke it as
# follows:
#
#     render-info [options...] blendfile
#
# where the only option is
#
#    --blender=blender
#          specifies the path to the Blender executable. Defaults to
#          searching for the name “blender” in your PATH.
#
# Copyright 2013-2016 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

blender=blender
for ((;;)); do
    if [ "${1:0:2}" != "--" ]; then
        break
    fi
    if [ "$1" == "--" ]; then
        shift
        break
    fi
    opt="${1:2:${#1}}"
    shift
    val="${opt#*=}"
    opt="${opt%%=*}"
    if [ "$opt" = "blender" ]; then
        blender="$val"
    else
        echo "$0: bad option $opt" 1>&2
        exit 3
    fi
done
if [ -z "$(type -p "$blender")" ]; then
    echo "$0: no such executable “$blender”" 1>&2
    exit 3
fi
if [ $# != 1 ]; then
    echo $'Usage:\n\t'"$0" $'<blendfile>\n' 1>&2
    exit 3
fi
export RENDER_blendfile="$1"

exec "$blender" 5>&1 1>/dev/null -b -P <(cat <<'EOD'
import sys
import os
import bpy

out = os.fdopen(5, "w")
  # use a different fd from stdout, only way it seems to avoid
  # output being polluted by Blender’s messages

blendfile = os.getenv("RENDER_blendfile")
bpy.ops.wm.open_mainfile(filepath = blendfile)

active_marker = "→"
other_marker = "*"
for scene in bpy.data.scenes :
    out.write \
      (
            "%s scene “%s”, engine “%s”\n"
        %
            (
                (other_marker, active_marker)[scene.name == bpy.context.scene.name],
                scene.name,
                scene.render.engine,
            )
      )
    out.write \
      (
        "    frames = %d to %d by %d" % (scene.frame_start, scene.frame_end, scene.frame_step)
      )
    if scene.render.frame_map_old != scene.render.frame_map_new :
        out.write \
          (
                ", time remap old:new = %d:%d"
            %
                (scene.render.frame_map_old, scene.render.frame_map_new)
          )
    #end if
    out.write("\n")
    out.write \
      (
            "    render resolution = %d%% × (%d, %d)\n"
        %
            (scene.render.resolution_percentage, scene.render.resolution_x, scene.render.resolution_y)
      )
    multiview = getattr(scene.render, "use_multiview", False)
    if multiview :
        out.write \
          (
                "    multiview = %s\n"
            %
                scene.render.views_format
          )
    #end if
    nr_cameras = 0
    for object in scene.objects :
        if object.type == "CAMERA" :
            nr_cameras += 1
            camera = object.data
            out.write \
              (
                    "    %s camera “%s” type %s"
                %
                    (
                        (other_marker, active_marker)[object.name == scene.camera.name],
                        object.name,
                        camera.type,
                    )
              )
            if multiview :
                out.write \
                  (
                        ", stereo convergence %s, pivot %s"
                    %
                        (camera.stereo.convergence_mode, camera.stereo.pivot)
                  )
            #end if
            out.write("\n")
        #end if
    #end for
    out.write("    Cameras: %d\n" % nr_cameras)
#end for
out.write("Scenes: %d\n" % len(bpy.data.scenes))
out.flush()
EOD
)
