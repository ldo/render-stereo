#!/usr/bin/python3
#+
# This script estimates the time remaining to finish rendering an
# animation, based on the time intervals between the last few
# PNG frames in an output directory.
#
# Invocation details are documented in the estimate-remaining(1)
# man page, included with this script.
#
# Copyright 2018-2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import os
import math
import functools
import operator
import time
import re
import getopt

#+
# Useful stuff
#-

seconds_per_day = 86400

units = \
    ( # sequence of quadruples, first element is multiplier to apply to
      # previous quadruple, or nr of seconds for first quadruple, second
      # element is abbreviated unit name, third element is singular unit
      # name, fourth element is plural unit name.
        (1, "s", "second", "seconds"),
        (60, "m", "minute", "minutes"),
        (60, "h", "hour", "hours"),
        (24, "d", "day", "days"),
        (7, "wk", "week", "weeks"),
    )

def format_elapsed(interval, long_form = False, seconds_places = 0) :
    "returns an accurate indication of the specified interval in seconds." \
    " long_form indicates whether to display the units in long form or short form," \
    " while seconds_places indicates the number of decimal places to use for showing" \
    " the seconds."
    interval = round(interval, seconds_places)
    unitindex = 0
    result = ""
    while True :
        if unitindex == len(units) :
            break
        unit = units[unitindex]
        if unitindex + 1 < len(units) :
            factor = units[unitindex + 1][0]
            place = interval % factor
        else :
            factor = None
            place = interval
        #end if
        place = \
            (
                "%%.%df%%s"
            %
                (0, seconds_places)[unitindex == 0]
            %
                (place, (unit[1], " " + unit[2:4][place != 1])[long_form])
            )
        result = \
            (
                place
            +
                ("", (" ", (", ", " and " )[unitindex == 1])[long_form])[unitindex > 0]
            +
                result
            )
        if factor == None :
            break
        interval //= factor
        if interval == 0 :
            break
        unitindex += 1
    #end while
    return \
        result
#end format_elapsed

def format_endtime(interval) :
    "returns a formatted representation of a date/time the specified number of seconds" \
    " in the future. Omits redundant fields, depending on how far in the future it is."
    now = time.time()
    then = now + interval
    now_items = time.localtime(now)
    then_items = time.localtime(then)
    format = "%H:%M:%S"
    if now_items[0:3] != then_items[0:3] :
        format += " %a"
        if (then - now) // seconds_per_day > 6 :
            format += " %d %b"
            if now_items[0] != then_items[0] :
                format += " %Y"
            #end if
        #end if
    #end if
    return \
        time.strftime(format, then_items)
#end format_endtime

def format_approx(interval) :
    val = round(interval)
    factor = functools.reduce(operator.mul, (u[0] for u in units), 1)
    i = len(units)
    while True :
        i -= 1
        if i == 0 :
            break
        if factor <= val :
            break
        factor //= units[i][0]
    #end while
    val1 = val // factor
    if i > 0 :
        factor2 = factor // units[i][0]
        val2 = val % factor // factor2
    else :
        val2 = 0
    #end if
    if val2 != 0 :
        formatted = "%d%s %d%s" % (val1, units[i][1], val2, units[i - 1][1])
    else :
        formatted = "%d%s" % (val1, units[i][1])
    #end if
    return formatted
#end format_approx

#+
# Mainline
#-

estimate_error = False
nr_frames = 6
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "e",
    ["estimate-error", "nr-frames="]
  )
for keyword, value in opts :
    if keyword == "-e" or keyword == "--estimate-error" :
        estimate_error = True
    elif keyword == "--nr-frames" :
        nr_frames = int(value)
        if nr_frames < 2 :
            raise getopt.GetoptError("minimum --nr-frames is 2")
        #end if
    #end if
#end for
if len(args) != 2 :
    raise getopt.GetoptError("need exactly 2 args, the «out-dir» and the «final-frame-nr»")
#end if
out_dir = args[0]
final_frame_nr = int(args[1])
if final_frame_nr < nr_frames :
    raise getopt.GetoptError \
      (
        "«final-frame-nr» must be at least --nr-frames, which is %d" % nr_frames
      )
#end if
if not os.path.isdir(out_dir) :
    raise getopt.GetoptError("«out-dir» %s is not a directory" % repr(out_dir))
#end if

frames_so_far = []
nr_frame_digits = None
for item in os.listdir(out_dir) :
    match = re.search("^(\d+)\.png$", item)
    if match != None :
        this_nr_digits = len(match.group(1))
        this_frame_nr = int(match.group(1))
        if nr_frame_digits == None :
            nr_frame_digits = this_nr_digits
        elif nr_frame_digits != this_nr_digits :
            raise RuntimeError \
              (
                    "wrong number of digits(%d) in frame %s -- expecting %d"
                %
                    (this_nr_digits, repr(item), nr_frame_digits)
              )
        #end if
        frames_so_far.append((this_frame_nr, item))
    else :
        sys.stderr.write("ignoring item %s in output directory" % repr(item))
    #end if
#end for
frames_so_far = sorted(frames_so_far, key = lambda x : x[0], reverse = True)[:nr_frames]
if len(frames_so_far) < 2 :
    raise RuntimeError("too few frames rendered so far, need at least 2")
#end if
nr_frames = min(nr_frames, len(frames_so_far))
# sys.stderr.write("sorted & trimmed frames_so_far = %s\n" % repr(frames_so_far)) # debug
error_estimate = None # to begin with
if estimate_error and nr_frames > 2 :
    frame_mtimes = list \
      (
        os.path.getmtime(os.path.join(out_dir, frames_so_far[i][1]))
        for i in range(nr_frames)
      )
    frame_times = list \
      (
            (frame_mtimes[i] - frame_mtimes[i + 1])
        /
            (frames_so_far[i][0] - frames_so_far[i + 1][0])
        for i in range(nr_frames - 1)
      )
    time_per_frame = sum(frame_times) / len(frame_times)
    variance = 0
    for i in range(nr_frames - 1) :
        diff = frame_times[i] - time_per_frame
        variance += diff * diff
    #end for
    error_estimate = math.sqrt(variance / (nr_frames - 1))
      # may not be strictly correct, but should be good enough
      # see <https://en.wikipedia.org/wiki/Standard_deviation>
else :
    time_per_frame = \
        (
            (
                os.path.getmtime(os.path.join(out_dir, frames_so_far[0][1]))
            -
                os.path.getmtime(os.path.join(out_dir, frames_so_far[nr_frames - 1][1]))
            )
        /
            (frames_so_far[0][0] - frames_so_far[nr_frames - 1][0])
        )
#end if
frames_delta = final_frame_nr - frames_so_far[0][0]
time_remaining = time_per_frame * frames_delta
sys.stdout.write \
  (
        "time per frame from last %(nr_frames)d frames = %(time_per_frame)s%(time_per_frame_error)s,"
        " latest frame = %(latest_frame)d, final frame = %(final_frame_nr)d, %(estimate)s\n"
    %
        {
            "nr_frames" : nr_frames,
            "time_per_frame" : format_elapsed
              (
                time_per_frame,
                seconds_places =
                    (
                        (3, 1)[time_per_frame >= 1],
                        0,
                    )[time_per_frame >= 10]
              ),
            "time_per_frame_error" :
                (lambda : "", lambda : " ±%ds" % round(error_estimate))
                    [error_estimate != None](),
            "latest_frame" : frames_so_far[0][0],
            "final_frame_nr" : final_frame_nr,
            "estimate" :
                (
                    lambda : "all done",
                    lambda :
                            "estimated time remaining = %(time_remaining)s%(time_remaining_error_seconds)s"
                            " (finish at %(finish_time)s%(time_remaining_error_approx)s)"
                        %
                            {
                                "time_remaining" : format_elapsed(time_remaining),
                                "time_remaining_error_seconds" :
                                    (
                                        lambda : "",
                                        lambda : " ±%ds" % round(error_estimate * frames_delta)
                                    )[error_estimate != None](),
                                "time_remaining_error_approx" :
                                    (
                                        lambda : "",
                                        lambda : " ±%s" % format_approx(error_estimate * frames_delta)
                                    )[error_estimate != None](),
                                "finish_time" : format_endtime(time_remaining),
                            },
                )[frames_delta > 0](),
        }
  )
