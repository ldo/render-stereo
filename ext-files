#!/bin/bash
#+
# This script displays information about a specified .blend file,
# namely external image, library, font and sound files that it
# depends on. Invoke it as follows:
#
#     ext-files [options...] blendfile
#
# where the valid options are
#
#    --blender=blender
#          specifies the path to the Blender executable. Defaults to
#          searching for the name “blender” in your PATH.
#    --full
#          spacies that details about the dependencies are to be
#          printed in JSON format. Otherwise only the file paths are
#          printed, one to a line.
#    --presence
#          also includes the status of each external file, whether it
#          could be found (and read) or not.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

blender=blender
full_json=
presence=
for ((;;)); do
    if [ "${1:0:2}" != "--" ]; then
        break
    fi
    opt="${1:2:${#1}}"
    shift
    val="${opt#*=}"
    opt="${opt%%=*}"
    if [ "$opt" = "blender" ]; then
        blender="$val"
    elif [ "$opt" = "full" ]; then
        full_json=1
    elif [ "$opt" = "presence" ]; then
        presence=1
    else
        echo "$0: bad option $opt" 1>&2
        exit 3
    fi
done
if [ -z "$(type -p "$blender")" ]; then
    echo "$0: no such executable “$blender”" 1>&2
    exit 3
fi
if [ $# != 1 ]; then
    echo $'Usage:\n\t'"$0" $'<blendfile>\n' 1>&2
    exit 3
fi
blendfile="$1"
export RENDER_full_json="$full_json"
export RENDER_presence="$presence"

exec "$blender" 5>&1 1>/dev/null -b "$blendfile" -P <(cat <<'EOD'
import sys
import os
import json
import bpy

def path_ok(path) :
    # checks that the file at path exists and is accessible. Requires
    # parent_dir to be defined as the parent directory of the .blend
    # file for interpreting relative paths.
    if path.startswith("//") :
        # Blender convention for path relative to .blend file
        path = os.path.join(parent_dir, path[2:])
    elif not path.startswith("/") :
        # not expecting a path relative to anything else!
        path = None
    #end if
    return \
        (
            path != None
        and
            os.access(path, os.R_OK)
              # technically I would rather use Linux eaccess(2),
              # but Python doesn’t offer that...
        )
#end path_ok

out = os.fdopen(5, "w")
  # use a different fd from stdout, only way it seems to avoid
  # output being polluted by Blender’s messages

full_json = os.getenv("RENDER_full_json", "") != ""
presence = os.getenv("RENDER_presence", "") != ""

if full_json :
    out.write("{")
    first_cat = True
#end if
if presence :
    parent_dir = os.path.split(bpy.data.filepath)[0]
#end if
for \
    category, match, mismatch, extra \
in \
    (
        ("images", {"type" : "IMAGE"}, {}, ("filepath_raw",)),
        ("libraries", {}, {}, ()),
        ("fonts", {}, (("filepath" , "<builtin>"),), ()),
        ("sounds", {}, {}, ()),
    ) \
:
    if full_json :
        if first_cat :
            first_cat = False
        else :
            out.write(",")
        #end if
        out.write("\n    %s:\n        [" % json.dumps(category))
        first_item = True
    #end if
    for item in getattr(bpy.data, category) :
        if (
                item.packed_file == None
            and
                not any(getattr(item, k) == v for k, v in mismatch)
            and
                all(getattr(item, k) == match[k] for k in match)
        ) :
            if full_json :
                if first_item :
                    first_item = False
                else :
                    out.write(",")
                #end if
                out.write("\n            {")
                first_attr = True
                for attr in ("name", "filepath") + extra :
                    if first_attr :
                        first_attr = False
                    else :
                        out.write(",")
                    #end if
                    value = getattr(item, attr)
                    out.write \
                      (
                            "\n                %s: %s"
                        %
                            (json.dumps(attr), json.dumps(value))
                      )
                    if presence and attr == "filepath" :
                        out.write \
                          (
                                ",\n                present: %s"
                            %
                                ("false", "true")[path_ok(value)]
                          )
                    #end if
                #end for
                out.write("\n            }")
            else :
                if presence :
                    out.write("%s: " % ("missing", "present")[path_ok(item.filepath)])
                #end if
                out.write(item.filepath + "\n")
            #end if
        #end if
    #end for
    if full_json :
        out.write("\n        ]")
    #end if
#end for
if full_json :
    out.write("\n}\n")
#end if
out.flush()
EOD
)
