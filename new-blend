#!/bin/bash
#+
# This script creates a new .blend file with default contents. Invoke it
# as follows:
#
#     new-blend [options...] blendfile
#
# where blendfile is the name of the new .blend file to create, and the valid
# options are
#
#    --blender=blender
#          specifies the path to the Blender executable. Defaults to
#          searching for the name “blender” in your PATH.
#    --enable-compositor-nodes
#          enables nodes in the Compositor.
#    --enable-shader-nodes
#          enables nodes on material and lamp definitions.
#    --enable-osl
#          turn on Open Shading Language (only relevant for the Cycles renderer).
#    --factory
#          indicates that the file should be initialized from the factory
#          default settings, not the user default settings.
#    --renderer=«renderer»
#          set the renderer to «renderer» (e.g. "CYCLES", "BLENDER_EEVEE" or "BLENDER_WORKBENCH").
#    --template=«template-name»
#          specifies the startup template to load.
#
# Copyright 2016-2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

blender=blender
factory=
template=
load_ui=1
enable_compositor_nodes=
enable_shader_nodes=
renderer=
enable_osl=
for ((;;)); do
    if [ "${1:0:2}" != "--" ]; then
        break
    fi
    if [ "$1" == "--" ]; then
        shift
        break
    fi
    opt="${1:2:${#1}}"
    shift
    val="${opt#*=}"
    opt="${opt%%=*}"
    if [ "$opt" = "blender" ]; then
        blender="$val"
    elif [ "$opt" = "enable-compositor-nodes" ]; then
        enable_compositor_nodes=1
    elif [ "$opt" = "enable-shader-nodes" ]; then
        enable_shader_nodes=1
    elif [ "$opt" = "enable-osl" ]; then
        enable_osl=1
    elif [ "$opt" = "factory" ]; then
        factory=1
    elif [ "$opt" = "no-load-ui" ]; then
        load_ui=
    elif [ "$opt" = "renderer" ]; then
        renderer="$val"
    elif [ "$opt" = "template" ]; then
        template="$val"
    else
        echo "$0: bad option $opt" 1>&2
        exit 1
    fi
done
if [ "$factory" -a -n "$template" ]; then
    echo "$0: --factory and --template are mutually exclusive" 1>&2
    exit 2
fi
if [ -z "$(type -p "$blender")" ]; then
    echo "$0: no such executable “$blender”" 1>&2
    exit 2
fi
if [ $# != 1 ]; then
    echo $'Usage:\n\t'"$0" $'<blendfile>\n' 1>&2
    exit 1
fi
blendfile="$1"
if [ -f "$blendfile" ]; then
    echo "$0: blendfile “$blendfile” already exists" 1>&2
    exit 2
fi
export RENDER_blendfile="$blendfile"
export RENDER_enable_compositor_nodes="$enable_compositor_nodes"
export RENDER_enable_shader_nodes="$enable_shader_nodes"
export RENDER_factory="$factory"
export RENDER_template="$template"
export RENDER_load_ui="$load_ui"
export RENDER_renderer="$renderer"
export RENDER_enable_osl="$enable_osl"

exec "$blender" -noaudio 5>&1 1>/dev/null -b -P <(cat <<'EOD'
import os
import getopt
import bpy

blendfile = os.getenv("RENDER_blendfile")
use_factory_settings = os.getenv("RENDER_factory", "") != ""
template = os.getenv("RENDER_template", "")
if template != "" :
    valid_templates = set()
    for dir in bpy.utils.app_template_paths() :
        valid_templates |= set(os.listdir(dir))
    #end for
    if template not in valid_templates :
        raise getopt.GetoptError \
          (
                "invalid template %s not found among those currently installed: %s"
            %
                (repr(template), repr(sorted(valid_templates)))
          )
    #end if
#end if
load_ui = os.getenv("RENDER_load_ui", "") != ""
enable_compositor_nodes = os.getenv("RENDER_enable_compositor_nodes", "") != ""
enable_shader_nodes = os.getenv("RENDER_enable_shader_nodes", "") != ""
renderer = os.getenv("RENDER_renderer", "")
enable_osl = os.getenv("RENDER_enable_osl", "") != ""

if use_factory_settings :
    bpy.ops.wm.read_factory_settings()
else :
    bpy.ops.wm.read_homefile(app_template = template, load_ui = load_ui)
#end if
for scene in bpy.data.scenes :
    if renderer != "" :
        scene.render.engine = renderer
    #end if
    if enable_osl :
        scene.cycles.shading_system = True
    #end if
    if enable_compositor_nodes :
        scene.use_nodes = True
    #end if
#end for
if enable_shader_nodes :
    for blocktype in ("lights", "materials", "worlds") :
        for datablock in getattr(bpy.data, blocktype) :
            datablock.use_nodes = True
        #end for
    #end for
#end if
bpy.ops.wm.save_as_mainfile(filepath = blendfile)
EOD
)
